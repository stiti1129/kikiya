#include <stdio.h>
#include <stdlib.h>

typedef struct node {
	int data;
	struct node* next;
	struct node* prev;
}NODE;

typedef NODE* STACK;
void printStack(STACK stack);
void push(STACK stack, int a);
int pop(STACK stack);
int main(void)
{
	int flag = 0;
	int carry = 0;
	int c1, c2;
	int result[100] = { 0 };
	char arr1[100] = { 48 };
	char arr2[100] = { 48 };
	STACK stack1 = (STACK)malloc(sizeof(NODE));
	stack1->next = NULL;
	stack1->prev = NULL;
	STACK stack2 = (STACK)malloc(sizeof(NODE));
	stack2->next = NULL;
	stack2->prev = NULL;
	scanf("%s %s", arr1, arr2);
	for (int i = 0; i < 100; i++)
	{
		if (arr1[i] == 48 || arr1[i] == 49)
		{
			arr1[i] = arr1[i] - 48;
			push(stack1, arr1[i]);
		}
		if (arr2[i] == 48 || arr2[i] == 49)
		{
			arr2[i] = arr2[i] - 48;
			push(stack2, arr2[i]);
		}
	}
	for (int i = 0; i < 100; i++)
	{
		c1 = pop(stack1);
		c2 = pop(stack2);
		
		if ((c1 + c2 + carry) == 3)
		{
			carry = 1;
			result[i] = 1;
		}
		else if ((c1 + c2 + carry) == 2)
		{
			carry = 1;
			result[i] = 0;
		}
		else if ((c1 + c2 + carry) == 1)
		{
			carry = 0;
			result[i] = 1;
		}
		else
		{
			carry = 0;
			result[i] = 0;
		}
	}
	for (int i = 99; i >=0; i--)
	{
		if (result[i] == 1)
			flag = 1;
		if (flag == 1)
			printf("%d", result[i]);
	}
	if (flag == 0)
		printf("0\n");
	printf("\n");
	return 0;
}
void push(STACK stack, int a)
{
	NODE* node = (NODE*)malloc(sizeof(NODE));
	node->next = NULL;
	node->prev = NULL;
	node->data = a;
	if (stack->next == NULL)
	{
		node->prev = stack;
		stack->next = node;
	}
	else
	{
		while (stack->next != NULL)
		{
			stack = stack->next;
		}
		stack->next = node;
		node->prev = stack;
	}
}
int pop(STACK stack)
{
	int a;
	NODE* node = (NODE*)malloc(sizeof(NODE));
	node->next = NULL;
	node->prev = NULL;
	node = stack->next;
	if (node == NULL)
	{
		return 0;
	}
	else
	{
		while (node->next != NULL)
		{
			node = node->next;
		}
		a = node->data;
		node->prev->next = NULL;
	}
	return a;

}


void printStack(STACK stack)
{

	while (stack->next != NULL)
	{
		printf("%d", stack->next->data);
		stack = stack->next;
	}
	printf("\n");
}
