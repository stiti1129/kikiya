#include<stdio.h>
int binarySearch(int * arr, int i, int j,int a);
void quickSort(int *arr, int i, int j);
int main(void)
{
	int ans = 0;
	int n, m;
	int arr[100000];
	int arr2[100000];
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%d", &arr[i]);
	
	scanf("%d", &m);
	for (int i = 0; i < m; i++)
		scanf("%d", &arr2[i]);
	
	quickSort(arr, 0, n - 1);

	for (int i = 0; i < m; i++)
	{
		ans = binarySearch(arr, 0, n - 1, arr2[i]);
		if (ans == 1)
			printf("1\n");
		else
			printf("0\n");
		ans = 0;
	}
	return 0;
}
void quickSort(int* arr, int i, int j)
{
	int left = i;
	int right = j;
	int pivot = arr[(left + right) / 2];
	int temp;
	while (left <= right)
	{
		while (arr[left] < pivot)
			left++;
		while (arr[right] > pivot)
			right--;

		if (left <= right)
		{
			temp = arr[left];
			arr[left] = arr[right];
			arr[right] = temp;
			left++;
			right--;
		}
	}

	if (left < j)
		quickSort(arr, left, j);
	if (right > i)
		quickSort(arr, i, right);
}

int binarySearch(int* arr, int i, int j, int a)
{
	int low, high, middle;
	low = i;
	high = j;

	while (low <= high)
	{
		middle = (low + high) / 2;
		if (a == arr[middle])
			return 1;
		else if (a < arr[middle])
			high = middle - 1;
		else 
			low = middle + 1;
	}
	return -1;
}
